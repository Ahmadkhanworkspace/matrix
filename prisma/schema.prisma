// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id              String   @id @default(cuid())
  username        String   @unique
  email           String   @unique
  firstName       String
  lastName        String
  password        String
  status          UserStatus @default(PENDING)
  memberType      MemberType @default(FREE)
  
  // Referral relationship
  sponsorId       String?
  sponsor         User?    @relation("UserReferrals", fields: [sponsorId], references: [id])
  downlines       User[]   @relation("UserReferrals")
  
  // Financial fields
  totalEarnings   Float    @default(0)
  paidEarnings    Float    @default(0)
  unpaidEarnings  Float    @default(0)
  
  // Timestamps
  joinDate        DateTime @default(now())
  lastLogin       DateTime?
  isActive        Boolean  @default(true)
  emailVerified   Boolean  @default(false)
  twoFactorEnabled Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  matrixPositions MatrixPosition[] @relation("UserMatrixPositions")
  sponsoredPositions MatrixPosition[] @relation("SponsoredMatrixPositions")
  matrixLevels    MatrixLevel[]
  payments        Payment[]
  withdrawals     Withdrawal[]
  transactions    Transaction[]
  bonuses         Bonus[]
  sessions        Session[]
  
  @@map("users")
}

// Matrix Position model
model MatrixPosition {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserMatrixPositions", fields: [userId], references: [id], onDelete: Cascade)
  matrixLevel Int
  positionPath String  // LTREE for hierarchical queries
  sponsorId   String?
  sponsor     User?    @relation("SponsoredMatrixPositions", fields: [sponsorId], references: [id])
  status      MatrixPositionStatus @default(ACTIVE)
  cycleCount  Int      @default(0)
  totalEarned Float    @default(0)
  createdAt   DateTime @default(now())
  cycledAt    DateTime?
  
  // Relations
  bonuses     Bonus[]
  
  @@unique([userId, matrixLevel])
  @@index([positionPath])
  @@index([matrixLevel])
  @@index([sponsorId])
  @@map("matrix_positions")
}

// Matrix Level model
model MatrixLevel {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  matrixLevel     Int
  positionsFilled Int      @default(0)
  totalPositions  Int      @default(2)
  status          MatrixLevelStatus @default(IN_PROGRESS)
  startDate       DateTime @default(now())
  completionDate  DateTime?
  
  @@unique([userId, matrixLevel])
  @@index([matrixLevel])
  @@map("matrix_levels")
}

// Payment Gateway Configuration model
model PaymentGatewayConfig {
  id                  String   @id @default(cuid())
  name                String
  gateway             PaymentGateway
  isActive            Boolean  @default(false)
  isTestMode          Boolean  @default(true)
  supportedCurrencies String[] // Array of currency codes
  minAmount           Float    @default(0)
  maxAmount           Float    @default(10000)
  feePercentage       Float    @default(0)
  fixedFee            Float    @default(0)
  config              Json     // Gateway-specific configuration
  webhookUrl          String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  payments            Payment[]
  
  @@unique([gateway])
  @@index([isActive])
  @@map("payment_gateway_configs")
}

// Currency model
model Currency {
  id                String   @id @default(cuid())
  code              String   @unique // USD, EUR, BTC, ETH, etc.
  name              String
  symbol            String
  isActive          Boolean  @default(false)
  isDefault         Boolean  @default(false)
  exchangeRate      Float    @default(1.0) // Rate relative to base currency
  decimalPlaces     Int      @default(2)
  minWithdrawal     Float    @default(0)
  maxWithdrawal     Float    @default(10000)
  withdrawalFee     Float    @default(0)
  withdrawalFeeType WithdrawalFeeType @default(PERCENTAGE)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([isActive])
  @@index([isDefault])
  @@map("currencies")
}

// Enhanced Payment model
model Payment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String   @default("USD")
  paymentMethod   PaymentMethod
  paymentGateway  PaymentGateway
  gatewayId       String
  gatewayConfig   PaymentGatewayConfig @relation(fields: [gatewayId], references: [id])
  status          PaymentStatus @default(PENDING)
  transactionId   String?  @unique
  gatewayResponse Json?
  description     String
  createdAt       DateTime @default(now())
  processedAt     DateTime?
  
  // Relations
  transactions    Transaction[] // Added relation
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([gatewayId])
  @@map("payments")
}

// Withdrawal model
model Withdrawal {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String   @default("USD")
  walletAddress   String
  withdrawalMethod String? // Added missing field
  status          WithdrawalStatus @default(PENDING)
  transactionId   String?  @unique
  gatewayResponse Json?
  fee             Float    @default(0)
  netAmount       Float
  metadata        Json?    // Added missing field
  createdAt       DateTime @default(now())
  processedAt     DateTime?
  
  // Relations
  transactions    Transaction[] // Added relation
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("withdrawals")
}

// Transaction model
model Transaction {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          TransactionType
  amount        Float
  currency      String   @default("USD")
  description   String
  referenceId   String?
  referenceType String?
  status        TransactionStatus @default(PENDING) // Added missing field
  balance       Float
  withdrawalId  String?  // Added missing field
  withdrawal    Withdrawal? @relation(fields: [withdrawalId], references: [id]) // Added relation
  paymentId     String?  // Added missing field
  payment       Payment? @relation(fields: [paymentId], references: [id]) // Added relation
  metadata      Json?    // Added missing field
  createdAt     DateTime @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("transactions")
}

// Bonus model
model Bonus {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        BonusType
  amount      Float
  currency    String   @default("USD")
  matrixLevel Int?
  positionId  String?
  position    MatrixPosition? @relation(fields: [positionId], references: [id])
  sponsorId   String?
  description String
  status      BonusStatus @default(PENDING)
  createdAt   DateTime @default(now())
  paidAt      DateTime?
  
  @@index([userId])
  @@index([type])
  @@index([status])
  @@map("bonuses")
}

// Session model
model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

// System Configuration model
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_configs")
}

// Matrix Configuration model
model MatrixConfig {
  id            String   @id @default(cuid())
  level         Int      @unique
  name          String
  price         Float
  currency      String   @default("USD")
  matrixWidth   Int      @default(2)
  matrixDepth   Int      @default(8)
  referralBonus Float    @default(0)
  matrixBonus   Float    @default(0)
  matchingBonus Float    @default(0)
  cycleBonus    Float    @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("matrix_configs")
}

// Enums
enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  BANNED
}

enum MemberType {
  FREE
  PRO
}

enum MatrixPositionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MatrixLevelStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  COINPAYMENTS
  NOWPAYMENTS
  STRIPE
  PAYPAL
  BINANCE
  RAZORPAY
  MERCADOPAGO
  FLUTTERWAVE
  PAYSTACK
  CRYPTO
  BANK_TRANSFER
  MANUAL
}

enum PaymentGateway {
  COINPAYMENTS
  NOWPAYMENTS
  STRIPE
  PAYPAL
  BINANCE
  RAZORPAY
  MERCADOPAGO
  FLUTTERWAVE
  PAYSTACK
  CRYPTO
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  REFERRAL_BONUS
  MATRIX_BONUS
  MATCHING_BONUS
  CYCLE_BONUS
  ADMIN_ADJUSTMENT
  CURRENCY_CONVERSION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum BonusType {
  REFERRAL
  MATRIX
  MATCHING
  CYCLE
  LEVEL
}

enum BonusStatus {
  PENDING
  PAID
  CANCELLED
}

enum WithdrawalFeeType {
  PERCENTAGE
  FIXED
}

// Banner model for content management
model Banner {
  id            String   @id @default(cuid())
  name          String
  imageUrl      String
  altText       String
  linkUrl       String
  type          String   // banner, popup, sidebar, notification
  status        String   // active, inactive, scheduled, draft
  position      String   // header, footer, sidebar, center, overlay
  priority      String   @default("medium") // low, medium, high
  targetAudience String[] // Array of audience types
  startDate     DateTime?
  endDate       DateTime?
  budget        Float    @default(0)
  spent         Float    @default(0)
  impressions   Int      @default(0)
  clicks        Int      @default(0)
  ctr           Float    @default(0)
  dimensions    Json?    // {width: number, height: number}
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  impressions_records BannerImpression[]
  clicks_records      BannerClick[]
  
  @@index([status])
  @@index([type])
  @@index([startDate])
  @@map("banners")
}

// Banner impression tracking
model BannerImpression {
  id        String   @id @default(cuid())
  bannerId  String
  banner    Banner   @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  userId    String?
  position  String?
  timestamp DateTime @default(now())
  
  @@index([bannerId])
  @@index([timestamp])
  @@map("banner_impressions")
}

// Banner click tracking
model BannerClick {
  id        String   @id @default(cuid())
  bannerId  String
  banner    Banner   @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  userId    String?
  position  String?
  timestamp DateTime @default(now())
  
  @@index([bannerId])
  @@index([timestamp])
  @@map("banner_clicks")
}

// Email template model
model EmailTemplate {
  id             String   @id @default(cuid())
  name           String
  subject        String
  content        String   @db.Text
  type           String   // welcome, bonus, withdrawal, matrix-completion, etc.
  status         String   @default("draft") // active, inactive, draft
  variables      String[] // Array of variable names like {{username}}
  targetAudience String[] // Array of audience types
  sendCount      Int      @default(0)
  openRate       Float    @default(0)
  clickRate      Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([status])
  @@index([type])
  @@map("email_templates")
}

// Promotional content model
model PromotionalContent {
  id             String   @id @default(cuid())
  title          String
  type           String   // banner, text-ad, email, popup, notification
  content        String   @db.Text
  status         String   @default("draft") // active, inactive, scheduled, draft
  targetAudience String[] // Array of audience types
  startDate      DateTime?
  endDate        DateTime?
  priority       String   @default("medium") // low, medium, high
  budget         Float    @default(0)
  spent          Float    @default(0)
  impressions    Int      @default(0)
  clicks         Int      @default(0)
  ctr            Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([status])
  @@index([type])
  @@index([startDate])
  @@map("promotional_content")
}

// Notification model
model Notification {
  id                String   @id @default(cuid())
  title             String
  message           String   @db.Text
  type              String   // system, bonus, withdrawal, matrix, leadership, maintenance, custom
  priority          String   @default("medium") // low, medium, high, urgent
  status            String   @default("draft") // active, inactive, scheduled, sent, draft
  targetAudience    String[] // Array of audience types
  sendDate          DateTime?
  sentAt            DateTime?
  totalSent         Int      @default(0)
  isGlobal          Boolean  @default(false)
  requiresAction    Boolean  @default(false)
  actionUrl         String?
  actionText        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  userNotifications UserNotification[]
  
  @@index([status])
  @@index([type])
  @@index([sendDate])
  @@map("notifications")
}

// User notification model (for tracking individual user notifications)
model UserNotification {
  id             String   @id @default(cuid())
  userId         String
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  status         String   @default("unread") // read, unread
  sentAt         DateTime @default(now())
  readAt         DateTime?
  
  @@unique([userId, notificationId])
  @@index([userId])
  @@index([status])
  @@map("user_notifications")
}

// Contest model for marketing tools
model Contest {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  type        String   // referral, matrix, earnings, activity
  status      String   @default("draft") // draft, active, paused, completed, cancelled
  startDate   DateTime
  endDate     DateTime
  prize       String
  prizeValue  Float    @default(0)
  currency    String   @default("USD")
  rules       Json?    // Contest rules and conditions
  participants Int     @default(0)
  winners     Json?    // Array of winner information
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  entries     ContestEntry[]
  
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("contests")
}

// Contest entry model
model ContestEntry {
  id        String   @id @default(cuid())
  contestId String
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  userId    String
  score     Float    @default(0)
  data      Json?    // Entry-specific data
  rank      Int?
  isWinner  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([contestId, userId])
  @@index([contestId])
  @@index([score])
  @@map("contest_entries")
}

// Marketing campaign model
model MarketingCampaign {
  id          String   @id @default(cuid())
  name        String
  type        String   // email, banner, notification, social
  status      String   @default("draft") // draft, active, paused, completed, cancelled
  description String?  @db.Text
  startDate   DateTime
  endDate     DateTime?
  budget      Float    @default(0)
  spent       Float    @default(0)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  ctr         Float    @default(0)
  conversionRate Float @default(0)
  targetAudience String[] // Array of audience types
  content     Json?    // Campaign content and settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status])
  @@index([type])
  @@index([startDate])
  @@map("marketing_campaigns")
}

// System log model for monitoring
model Log {
  id        String   @id @default(cuid())
  level     String   // info, warn, error, debug
  message   String   @db.Text
  context   Json?    // Additional context data
  userId    String?
  action    String?
  resource  String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@index([level])
  @@index([createdAt])
  @@index([userId])
  @@map("logs")
}

// Backup model for system monitoring
model Backup {
  id          String   @id @default(cuid())
  type        String   // database, files, full
  status      String   // pending, in_progress, completed, failed
  filename    String?
  fileSize    BigInt?
  location    String?
  description String?
  error       String?
  startedAt   DateTime @default(now())
  completedAt DateTime?
  createdAt   DateTime @default(now())

  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("backups")
}

// System configuration model
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?  @db.Text
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@map("system_configs")
}