// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id              String   @id @default(cuid())
  username        String   @unique
  email           String   @unique
  firstName       String
  lastName        String
  password        String
  status          UserStatus @default(PENDING)
  memberType      MemberType @default(FREE)
  
  // Referral relationship
  sponsorId       String?
  sponsor         User?    @relation("UserReferrals", fields: [sponsorId], references: [id])
  downlines       User[]   @relation("UserReferrals")
  
  // Financial fields (from PHP: Total, Unpaid, Paid, RRUnpaid)
  totalEarnings   Float    @default(0) // Total
  paidEarnings    Float    @default(0) // Paid
  unpaidEarnings  Float    @default(0) // Unpaid
  rrUnpaid        Float    @default(0) // RRUnpaid (reserve requirement unpaid)
  
  // Credits (from PHP: banners, textads)
  bannerCredits   Int      @default(0) // banners
  textAdCredits   Int      @default(0) // textads
  
  // Wallet address for withdrawals
  tronWallet      String?  // TronWallet for crypto withdrawals
  
  // Password reset fields
  passwordResetToken String?  @map("password_reset_token")
  passwordResetExpiry DateTime? @map("password_reset_expiry")
  
  // Timestamps
  joinDate        DateTime @default(now())
  lastLogin       DateTime?
  isActive        Boolean  @default(true)
  emailVerified   Boolean  @default(false)
  twoFactorEnabled Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  matrixPositions MatrixPosition[] @relation("UserMatrixPositions")
  sponsoredPositions MatrixPosition[] @relation("SponsoredMatrixPositions")
  matrixLevels    MatrixLevel[]
  payments        Payment[]
  withdrawals     Withdrawal[]
  transactions    Transaction[]
  bonuses         Bonus[]
  sessions        Session[]
  verifierEntries Verifier[] @relation("VerifierEntries")
  transactionLogs TransactionLog[] @relation("TransactionLogs")
  withdrawalTransactions WithdrawalTransaction[] @relation("WithdrawalTransactions")
  globalPIFPool   GlobalPIFPool[] @relation("GlobalPIFPool")
  videoAdPurchases VideoAdPurchase[] @relation("VideoAdPurchases")
  referralLinks      ReferralLink[] @relation("ReferralLinks")
  referralConversions ReferralConversion[] @relation("ReferralConversions")
  userRanks         UserRank[] @relation("UserRanks")
  rankHistory      RankHistory[] @relation("RankHistory")
  conversations    ConversationMember[] @relation("ConversationMembers")
  messages         Message[] @relation("Messages")
  chatRooms        ChatRoomMember[] @relation("ChatRoomMembers")
  chatMessages     ChatMessage[] @relation("ChatMessages")
  achievements     UserAchievement[] @relation("UserAchievements")
  badges           UserBadge[] @relation("UserBadges")
  points           Points[] @relation("Points")
  challenges       UserChallenge[] @relation("UserChallenges")
  rewardRedemptions RewardRedemption[] @relation("RewardRedemptions")
  
  @@map("users")
}

// Matrix Position model (matches PHP matrix table structure)
model MatrixPosition {
  id          String   @id @default(cuid())
  userId      String
  username    String   // Username for quick lookup
  user        User     @relation("UserMatrixPositions", fields: [userId], references: [id], onDelete: Cascade)
  matrixLevel Int      // Matrix level ID (mid)
  positionPath String  // LTREE for hierarchical queries
  sponsorId   String?  // ref_by (user ID)
  sponsorUsername String? // Sponsor username
  sponsor     User?    @relation("SponsoredMatrixPositions", fields: [sponsorId], references: [id])
  refBy       String?  // ref_by ID (matrix position ID)
  leader      String?  // Leader ID (matrix position ID)
  mainId      String?  // MainID (main position ID for user)
  
  // Level counters (from PHP: Level1, Level2, ..., Level10)
  level1      Int      @default(0)
  level2      Int      @default(0)
  level3      Int      @default(0)
  level4      Int      @default(0)
  level5      Int      @default(0)
  level6      Int      @default(0)
  level7      Int      @default(0)
  level8      Int      @default(0)
  level9      Int      @default(0)
  level10     Int      @default(0)
  
  totalEarned Float    @default(0) // Total earnings
  status      MatrixPositionStatus @default(ACTIVE)
  cycleCount  Int      @default(0)
  createdAt   DateTime @default(now())
  cycledAt    DateTime? // CDate
  
  // Relations
  bonuses     Bonus[]
  
  @@unique([userId, matrixLevel])
  @@index([positionPath])
  @@index([matrixLevel])
  @@index([sponsorId])
  @@index([refBy])
  @@index([leader])
  @@index([mainId])
  @@index([username])
  @@map("matrix_positions")
}

// Matrix Level model
model MatrixLevel {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  matrixLevel     Int
  positionsFilled Int      @default(0)
  totalPositions  Int      @default(2)
  status          MatrixLevelStatus @default(IN_PROGRESS)
  startDate       DateTime @default(now())
  completionDate  DateTime?
  
  @@unique([userId, matrixLevel])
  @@index([matrixLevel])
  @@map("matrix_levels")
}

// Payment Gateway Configuration model
model PaymentGatewayConfig {
  id                  String   @id @default(cuid())
  name                String
  gateway             PaymentGateway
  isActive            Boolean  @default(false)
  isTestMode          Boolean  @default(true)
  supportedCurrencies String[] // Array of currency codes
  minAmount           Float    @default(0)
  maxAmount           Float    @default(10000)
  feePercentage       Float    @default(0)
  fixedFee            Float    @default(0)
  config              Json     // Gateway-specific configuration
  webhookUrl          String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  payments            Payment[]
  
  @@unique([gateway])
  @@index([isActive])
  @@map("payment_gateway_configs")
}

// Currency model
model Currency {
  id                String   @id @default(cuid())
  code              String   @unique // USD, EUR, BTC, ETH, etc.
  name              String
  symbol            String
  isActive          Boolean  @default(false)
  isDefault         Boolean  @default(false)
  exchangeRate      Float    @default(1.0) // Rate relative to base currency
  decimalPlaces     Int      @default(2)
  minWithdrawal     Float    @default(0)
  maxWithdrawal     Float    @default(10000)
  withdrawalFee     Float    @default(0)
  withdrawalFeeType WithdrawalFeeType @default(PERCENTAGE)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([isActive])
  @@index([isDefault])
  @@map("currencies")
}

// Enhanced Payment model
model Payment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String   @default("USD")
  paymentMethod   PaymentMethod
  paymentGateway  PaymentGateway
  gatewayId       String
  gatewayConfig   PaymentGatewayConfig @relation(fields: [gatewayId], references: [id])
  status          PaymentStatus @default(PENDING)
  transactionId   String?  @unique
  gatewayResponse Json?
  description     String
  createdAt       DateTime @default(now())
  processedAt     DateTime?
  
  // Relations
  transactions    Transaction[] // Added relation
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([gatewayId])
  @@map("payments")
}

// Withdrawal model
model Withdrawal {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String   @default("USD")
  walletAddress   String
  withdrawalMethod String? // Added missing field
  status          WithdrawalStatus @default(PENDING)
  transactionId   String?  @unique
  gatewayResponse Json?
  fee             Float    @default(0)
  netAmount       Float
  metadata        Json?    // Added missing field
  createdAt       DateTime @default(now())
  processedAt     DateTime?
  
  // Relations
  transactions    Transaction[] // Added relation
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("withdrawals")
}

// Transaction model
model Transaction {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          TransactionType
  amount        Float
  currency      String   @default("USD")
  description   String
  referenceId   String?
  referenceType String?
  status        TransactionStatus @default(PENDING) // Added missing field
  balance       Float
  withdrawalId  String?  // Added missing field
  withdrawal    Withdrawal? @relation(fields: [withdrawalId], references: [id]) // Added relation
  paymentId     String?  // Added missing field
  payment       Payment? @relation(fields: [paymentId], references: [id]) // Added relation
  metadata      Json?    // Added missing field
  createdAt     DateTime @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("transactions")
}

// Bonus model
model Bonus {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        BonusType
  amount      Float
  currency    String   @default("USD")
  matrixLevel Int?
  positionId  String?
  position    MatrixPosition? @relation(fields: [positionId], references: [id])
  sponsorId   String?
  description String
  status      BonusStatus @default(PENDING)
  createdAt   DateTime @default(now())
  paidAt      DateTime?
  
  @@index([userId])
  @@index([type])
  @@index([status])
  @@map("bonuses")
}

// Session model
model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

// System Configuration model
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_configs")
}

// Matrix Configuration model
model MatrixConfig {
  id            String   @id @default(cuid())
  level         Int      @unique
  name          String
  price         Float
  currency      String   @default("USD")
  matrixWidth   Int      @default(2)
  matrixDepth   Int      @default(8)
  referralBonus Float    @default(0)
  matrixBonus   Float    @default(0)
  matchingBonus Float    @default(0)
  cycleBonus    Float    @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("matrix_configs")
}

// Enums
enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  BANNED
}

enum MemberType {
  FREE
  PRO
}

enum MatrixPositionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MatrixLevelStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  COINPAYMENTS
  NOWPAYMENTS
  STRIPE
  PAYPAL
  BINANCE
  RAZORPAY
  MERCADOPAGO
  FLUTTERWAVE
  PAYSTACK
  CRYPTO
  BANK_TRANSFER
  MANUAL
}

enum PaymentGateway {
  COINPAYMENTS
  NOWPAYMENTS
  STRIPE
  PAYPAL
  BINANCE
  RAZORPAY
  MERCADOPAGO
  FLUTTERWAVE
  PAYSTACK
  CRYPTO
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  REFERRAL_BONUS
  MATRIX_BONUS
  MATCHING_BONUS
  CYCLE_BONUS
  ADMIN_ADJUSTMENT
  CURRENCY_CONVERSION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum BonusType {
  REFERRAL
  MATRIX
  MATCHING
  CYCLE
  LEVEL
}

enum BonusStatus {
  PENDING
  PAID
  CANCELLED
}

enum WithdrawalFeeType {
  PERCENTAGE
  FIXED
}

// Banner model for content management
model Banner {
  id            String   @id @default(cuid())
  name          String
  imageUrl      String
  altText       String
  linkUrl       String
  type          String   // banner, popup, sidebar, notification
  status        String   // active, inactive, scheduled, draft
  position      String   // header, footer, sidebar, center, overlay
  priority      String   @default("medium") // low, medium, high
  targetAudience String[] // Array of audience types
  startDate     DateTime?
  endDate       DateTime?
  budget        Float    @default(0)
  spent         Float    @default(0)
  impressions   Int      @default(0)
  clicks        Int      @default(0)
  ctr           Float    @default(0)
  dimensions    Json?    // {width: number, height: number}
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  impressions_records BannerImpression[]
  clicks_records      BannerClick[]
  
  @@index([status])
  @@index([type])
  @@index([startDate])
  @@map("banners")
}

// Banner impression tracking
model BannerImpression {
  id        String   @id @default(cuid())
  bannerId  String
  banner    Banner   @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  userId    String?
  position  String?
  timestamp DateTime @default(now())
  
  @@index([bannerId])
  @@index([timestamp])
  @@map("banner_impressions")
}

// Banner click tracking
model BannerClick {
  id        String   @id @default(cuid())
  bannerId  String
  banner    Banner   @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  userId    String?
  position  String?
  timestamp DateTime @default(now())
  
  @@index([bannerId])
  @@index([timestamp])
  @@map("banner_clicks")
}

// Email template model
model EmailTemplate {
  id             String   @id @default(cuid())
  name           String
  subject        String
  content        String   @db.Text
  type           String   // welcome, bonus, withdrawal, matrix-completion, etc.
  status         String   @default("draft") // active, inactive, draft
  variables      String[] // Array of variable names like {{username}}
  targetAudience String[] // Array of audience types
  sendCount      Int      @default(0)
  openRate       Float    @default(0)
  clickRate      Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([status])
  @@index([type])
  @@map("email_templates")
}

// Promotional content model
model PromotionalContent {
  id             String   @id @default(cuid())
  title          String
  type           String   // banner, text-ad, email, popup, notification
  content        String   @db.Text
  status         String   @default("draft") // active, inactive, scheduled, draft
  targetAudience String[] // Array of audience types
  startDate      DateTime?
  endDate        DateTime?
  priority       String   @default("medium") // low, medium, high
  budget         Float    @default(0)
  spent          Float    @default(0)
  impressions    Int      @default(0)
  clicks         Int      @default(0)
  ctr            Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([status])
  @@index([type])
  @@index([startDate])
  @@map("promotional_content")
}

// Notification model
model Notification {
  id                String   @id @default(cuid())
  title             String
  message           String   @db.Text
  type              String   // system, bonus, withdrawal, matrix, leadership, maintenance, custom
  priority          String   @default("medium") // low, medium, high, urgent
  status            String   @default("draft") // active, inactive, scheduled, sent, draft
  targetAudience    String[] // Array of audience types
  sendDate          DateTime?
  sentAt            DateTime?
  totalSent         Int      @default(0)
  isGlobal          Boolean  @default(false)
  requiresAction    Boolean  @default(false)
  actionUrl         String?
  actionText        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  userNotifications UserNotification[]
  
  @@index([status])
  @@index([type])
  @@index([sendDate])
  @@map("notifications")
}

// User notification model (for tracking individual user notifications)
model UserNotification {
  id             String   @id @default(cuid())
  userId         String
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  status         String   @default("unread") // read, unread
  sentAt         DateTime @default(now())
  readAt         DateTime?
  
  @@unique([userId, notificationId])
  @@index([userId])
  @@index([status])
  @@map("user_notifications")
}

// Contest model for marketing tools
model Contest {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  type        String   // referral, matrix, earnings, activity
  status      String   @default("draft") // draft, active, paused, completed, cancelled
  startDate   DateTime
  endDate     DateTime
  prize       String
  prizeValue  Float    @default(0)
  currency    String   @default("USD")
  rules       Json?    // Contest rules and conditions
  participants Int     @default(0)
  winners     Json?    // Array of winner information
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  entries     ContestEntry[]
  
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("contests")
}

// Contest entry model
model ContestEntry {
  id        String   @id @default(cuid())
  contestId String
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  userId    String
  score     Float    @default(0)
  data      Json?    // Entry-specific data
  rank      Int?
  isWinner  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([contestId, userId])
  @@index([contestId])
  @@index([score])
  @@map("contest_entries")
}

// Marketing campaign model
model MarketingCampaign {
  id          String   @id @default(cuid())
  name        String
  type        String   // email, banner, notification, social
  status      String   @default("draft") // draft, active, paused, completed, cancelled
  description String?  @db.Text
  startDate   DateTime
  endDate     DateTime?
  budget      Float    @default(0)
  spent       Float    @default(0)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  ctr         Float    @default(0)
  conversionRate Float @default(0)
  targetAudience String[] // Array of audience types
  content     Json?    // Campaign content and settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status])
  @@index([type])
  @@index([startDate])
  @@map("marketing_campaigns")
}

// System log model for monitoring
model Log {
  id        String   @id @default(cuid())
  level     String   // info, warn, error, debug
  message   String   @db.Text
  context   Json?    // Additional context data
  userId    String?
  action    String?
  resource  String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@index([level])
  @@index([createdAt])
  @@index([userId])
  @@map("logs")
}

// Backup model for system monitoring
model Backup {
  id          String   @id @default(cuid())
  type        String   // database, files, full
  status      String   // pending, in_progress, completed, failed
  filename    String?
  fileSize    BigInt?
  location    String?
  description String?
  error       String?
  startedAt   DateTime @default(now())
  completedAt DateTime?
  createdAt   DateTime @default(now())

  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("backups")
}

// System configuration model
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?  @db.Text
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@map("system_configs")
}

// Verifier model - queue for pending matrix entries
model Verifier {
  id          String   @id @default(cuid())
  username    String   // User username
  userId      String?  // Reference to user ID
  user        User?    @relation("VerifierEntries", fields: [userId], references: [id], onDelete: Cascade)
  mid         Int      // Matrix level ID
  date        DateTime @default(now())
  etype       Int      @default(0) // Entry type: 0=new, 1=re-entry
  sponsor     String?  // Sponsor username
  createdAt   DateTime @default(now())
  
  @@index([date])
  @@index([mid])
  @@index([username])
  @@map("verifier")
}

// Membership Level model - stores matrix configuration details
model MembershipLevel {
  id                  String   @id @default(cuid())
  name                String
  fee                 Float
  matrixtype          Int      @default(1) // 1=forced matrix, 2=unforced
  levels              Int      @default(10) // Number of levels
  forcedmatrix        Int      @default(2) // Matrix width
  refbonus            Float    @default(0)
  refbonuspaid        Int      @default(0) // 0=not paid, 1=paid, 2=auto paid
  payouttype          Int      @default(1) // 1=cycle completion, 2=per referral, 3=on cycle
  matrixbonus         Float    @default(0)
  matchingbonus       Float    @default(0)
  
  // Level bonuses (per referral)
  level1              Float    @default(0)
  level2              Float    @default(0)
  level3              Float    @default(0)
  level4              Float    @default(0)
  level5              Float    @default(0)
  level6              Float    @default(0)
  level7              Float    @default(0)
  level8              Float    @default(0)
  level9              Float    @default(0)
  level10             Float    @default(0)
  
  // Level matching bonuses
  level1m              Float    @default(0)
  level2m              Float    @default(0)
  level3m              Float    @default(0)
  level4m              Float    @default(0)
  level5m              Float    @default(0)
  level6m              Float    @default(0)
  level7m              Float    @default(0)
  level8m              Float    @default(0)
  level9m              Float    @default(0)
  level10m             Float    @default(0)
  
  // Level cycle bonuses
  level1c              Float    @default(0)
  level2c              Float    @default(0)
  level3c              Float    @default(0)
  level4c              Float    @default(0)
  level5c              Float    @default(0)
  level6c              Float    @default(0)
  level7c              Float    @default(0)
  level8c              Float    @default(0)
  level9c              Float    @default(0)
  level10c             Float    @default(0)
  
  // Level cycle matching bonuses
  level1cm             Float    @default(0)
  level2cm             Float    @default(0)
  level3cm             Float    @default(0)
  level4cm             Float    @default(0)
  level5cm             Float    @default(0)
  level6cm             Float    @default(0)
  level7cm             Float    @default(0)
  level8cm             Float    @default(0)
  level9cm             Float    @default(0)
  level10cm            Float    @default(0)
  
  // Credits
  textcreditsentry     Int      @default(0)
  bannercreditsentry   Int      @default(0)
  textcreditscycle     Int      @default(0)
  bannercreditscycle   Int      @default(0)
  
  // Re-entry settings
  reentry              Int      @default(0) // 0=disabled, 1=enabled
  reentrynum            Int      @default(0)
  
  // Cross-matrix entry settings
  entry1                Int      @default(0)
  entry1num              Int      @default(0)
  matrixid1              Int?
  entry2                Int      @default(0)
  entry2num              Int      @default(0)
  matrixid2              Int?
  entry3                Int      @default(0)
  entry3num              Int      @default(0)
  matrixid3              Int?
  entry4                Int      @default(0)
  entry4num              Int      @default(0)
  matrixid4              Int?
  entry5                Int      @default(0)
  entry5num              Int      @default(0)
  matrixid5              Int?
  
  // Email settings
  welcomemail           Int      @default(0)
  subject1              String?  @db.Text
  message1              String?  @db.Text
  eformat1              String?  // html, text
  cyclemail             Int      @default(0)
  subject2              String?  @db.Text
  message2              String?  @db.Text
  eformat2              String?
  cyclemailsponsor      Int      @default(0)
  subject3              String?  @db.Text
  message3              String?  @db.Text
  eformat3              String?
  
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@unique([name])
  @@map("membership_levels")
}

// Cron Job Status model
model CronJob {
  id          String   @id @default(cuid())
  active      Boolean  @default(false)
  lastId      String?
  lastRun     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("cronjobs")
}

// Transaction Log model (tlogs in PHP)
model TransactionLog {
  id          String   @id @default(cuid())
  username    String
  userId      String?
  user        User?    @relation("TransactionLogs", fields: [userId], references: [id], onDelete: Cascade)
  memid       Int      // Matrix position ID reference
  matrix      Int      // Matrix level ID
  amount      Float
  purpose     String
  date        DateTime @default(now())
  
  @@index([username])
  @@index([matrix])
  @@index([date])
  @@map("transaction_logs")
}

// Withdrawal Transaction model (wtransaction in PHP)
model WithdrawalTransaction {
  id          String   @id @default(cuid())
  username    String
  userId      String?
  user        User?    @relation("WithdrawalTransactions", fields: [userId], references: [id], onDelete: Cascade)
  paymentMode String   // e.g., "Tron: transaction_id"
  amount      Float
  approved    Int      @default(0) // 0=pending, 1=approved
  date        DateTime @default(now())
  
  @@index([username])
  @@index([date])
  @@map("withdrawal_transactions")
}

// Global PIF Pool model (globalpifpool in PHP)
model GlobalPIFPool {
  id          String   @id @default(cuid())
  username    String
  userId      String?
  user        User?    @relation("GlobalPIFPool", fields: [userId], references: [id], onDelete: Cascade)
  sponsor     String?  // Sponsor username
  date        DateTime @default(now())
  
  @@index([username])
  @@index([sponsor])
  @@index([date])
  @@map("global_pif_pool")
}

// ============ REFERRAL TRACKING ============

// Referral Link model
model ReferralLink {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation("ReferralLinks", fields: [userId], references: [id], onDelete: Cascade)
  name            String
  linkCode        String   @unique
  url             String
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  utmTerm         String?
  utmContent      String?
  clicks          Int      @default(0)
  signups         Int      @default(0)
  conversions     Int      @default(0)
  totalEarnings   Float    @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  clickRecords    ReferralClick[]
  conversionRecords ReferralConversion[]
  
  @@index([userId])
  @@index([linkCode])
  @@index([isActive])
  @@map("referral_links")
}

// Referral Click model
model ReferralClick {
  id              String   @id @default(cuid())
  linkId          String
  link            ReferralLink @relation(fields: [linkId], references: [id], onDelete: Cascade)
  visitorIp       String?
  userAgent       String?
  referrer         String?
  clickedAt        DateTime @default(now())
  converted        Boolean  @default(false)
  convertedAt      DateTime?
  
  // Relations
  conversions     ReferralConversion[]
  
  @@index([linkId])
  @@index([clickedAt])
  @@map("referral_clicks")
}

// Referral Conversion model
model ReferralConversion {
  id              String   @id @default(cuid())
  linkId          String
  link            ReferralLink @relation(fields: [linkId], references: [id], onDelete: Cascade)
  clickId         String?
  click            ReferralClick? @relation(fields: [clickId], references: [id])
  userId          String   // Referrer
  user            User     @relation("ReferralConversions", fields: [userId], references: [id], onDelete: Cascade)
  newUserId       String?  // New signup
  conversionType  String   // signup, purchase, activation
  amount          Float    @default(0)
  commission      Float    @default(0)
  createdAt       DateTime @default(now())
  
  @@index([linkId])
  @@index([userId])
  @@index([newUserId])
  @@index([conversionType])
  @@map("referral_conversions")
}

// ============ RANK SYSTEM ============

// Rank model
model Rank {
  id              String   @id @default(cuid())
  name            String   @unique
  level           Int      @unique
  description     String?  @db.Text
  icon            String?
  color           String?
  requirements    Json?    // Array of requirement objects
  benefits        Json?    // Array of benefits
  bonuses         Json?    // Bonus structure
  privileges      String[] // Array of privileges
  isActive        Boolean  @default(true)
  sortOrder       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  userRanks       UserRank[] @relation("UserRanks")
  oldRankHistory  RankHistory[] @relation("OldRankHistory")
  newRankHistory  RankHistory[] @relation("NewRankHistory")
  
  @@index([level])
  @@index([isActive])
  @@index([sortOrder])
  @@map("ranks")
}

// User Rank model
model UserRank {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation("UserRanks", fields: [userId], references: [id], onDelete: Cascade)
  rankId          String
  rank            Rank     @relation("UserRanks", fields: [rankId], references: [id])
  achievedAt      DateTime @default(now())
  expiresAt       DateTime?
  isActive        Boolean  @default(true)
  qualificationData Json?  // Store qualification progress
  
  @@index([userId])
  @@index([rankId])
  @@index([isActive])
  @@map("user_ranks")
}

// Rank History model
model RankHistory {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation("RankHistory", fields: [userId], references: [id], onDelete: Cascade)
  oldRankId       String?
  oldRank         Rank?    @relation("OldRankHistory", fields: [oldRankId], references: [id])
  newRankId       String
  newRank         Rank     @relation("NewRankHistory", fields: [newRankId], references: [id])
  changedAt       DateTime @default(now())
  reason          String?  // auto, manual, disqualification
  changedBy       String?  // userId or system
  
  @@index([userId])
  @@index([changedAt])
  @@map("rank_history")
}

// ============ MESSAGING SYSTEM ============

// Conversation model
model Conversation {
  id              String   @id @default(cuid())
  type            String   // direct, group, broadcast
  name            String?
  createdBy       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastMessageAt   DateTime?
  
  // Relations
  members        ConversationMember[]
  messages       Message[]
  
  @@index([createdBy])
  @@index([type])
  @@index([lastMessageAt])
  @@map("conversations")
}

// Conversation Member model
model ConversationMember {
  id              String   @id @default(cuid())
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation("ConversationMembers", fields: [userId], references: [id], onDelete: Cascade)
  role            String   @default("member") // member, admin, owner
  joinedAt        DateTime @default(now())
  lastReadAt      DateTime?
  
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_members")
}

// Message model
model Message {
  id              String   @id @default(cuid())
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation("Messages", fields: [userId], references: [id], onDelete: Cascade)
  content         String   @db.Text
  type            String   @default("text") // text, image, file, system
  parentMessageId String?
  parentMessage   Message? @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies         Message[] @relation("MessageReplies")
  isEdited        Boolean  @default(false)
  editedAt        DateTime?
  createdAt       DateTime @default(now())
  
  // Relations
  attachments     MessageAttachment[]
  reads           MessageRead[]
  
  @@index([conversationId])
  @@index([userId])
  @@index([createdAt])
  @@map("messages")
}

// Message Attachment model
model MessageAttachment {
  id              String   @id @default(cuid())
  messageId       String
  message         Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  fileName        String
  fileUrl         String
  fileType        String
  fileSize        Int      // in bytes
  createdAt       DateTime @default(now())
  
  @@index([messageId])
  @@map("message_attachments")
}

// Message Read model
model MessageRead {
  id              String   @id @default(cuid())
  messageId       String
  message         Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId          String
  readAt          DateTime @default(now())
  
  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@map("message_reads")
}

// ============ LIVE CHAT SYSTEM ============

// Chat Room model
model ChatRoom {
  id              String   @id @default(cuid())
  name            String
  type            String   // public, private, support
  description     String?  @db.Text
  isPublic        Boolean  @default(true)
  createdBy       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastMessageAt   DateTime?
  
  // Relations
  members        ChatRoomMember[]
  messages       ChatMessage[]
  
  @@index([type])
  @@index([isPublic])
  @@index([lastMessageAt])
  @@map("chat_rooms")
}

// Chat Room Member model
model ChatRoomMember {
  id              String   @id @default(cuid())
  roomId          String
  room            ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation("ChatRoomMembers", fields: [userId], references: [id], onDelete: Cascade)
  role            String   @default("member") // member, admin, moderator
  joinedAt        DateTime @default(now())
  lastSeenAt      DateTime?
  
  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
  @@map("chat_room_members")
}

// Chat Message model
model ChatMessage {
  id              String   @id @default(cuid())
  roomId          String
  room            ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation("ChatMessages", fields: [userId], references: [id], onDelete: Cascade)
  content         String   @db.Text
  type            String   @default("text") // text, image, file, system
  attachmentUrl   String?
  replyToId       String?
  createdAt       DateTime @default(now())
  
  @@index([roomId])
  @@index([userId])
  @@index([createdAt])
  @@map("chat_messages")
}

// Chat User Status model
model ChatUser {
  id              String   @id @default(cuid())
  userId          String   @unique
  status          String   @default("offline") // online, away, busy, offline
  currentRoomId   String?
  lastActiveAt    DateTime @default(now())
  
  @@index([status])
  @@index([lastActiveAt])
  @@map("chat_users")
}

// ============ GAMIFICATION SYSTEM ============

// Achievement model
model Achievement {
  id              String   @id @default(cuid())
  name            String
  description     String?  @db.Text
  icon            String?
  category        String   // referral, earnings, matrix, social, etc.
  points          Int      @default(0)
  requirementType String  // count, amount, streak, etc.
  requirementValue Float  // value needed
  isActive        Boolean  @default(true)
  sortOrder       Int      @default(0)
  createdAt       DateTime @default(now())
  
  // Relations
  userAchievements UserAchievement[] @relation("UserAchievements")
  
  @@index([category])
  @@index([isActive])
  @@map("achievements")
}

// User Achievement model
model UserAchievement {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation("UserAchievements", fields: [userId], references: [id], onDelete: Cascade)
  achievementId   String
  achievement     Achievement @relation("UserAchievements", fields: [achievementId], references: [id])
  progress        Float    @default(0)
  earnedAt        DateTime?
  isEarned        Boolean  @default(false)
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@map("user_achievements")
}

// Badge model
model Badge {
  id              String   @id @default(cuid())
  name            String
  description     String?  @db.Text
  icon            String?
  rarity          String   @default("common") // common, rare, epic, legendary
  category        String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  // Relations
  userBadges     UserBadge[] @relation("UserBadges")
  
  @@index([category])
  @@index([rarity])
  @@map("badges")
}

// User Badge model
model UserBadge {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation("UserBadges", fields: [userId], references: [id], onDelete: Cascade)
  badgeId         String
  badge           Badge    @relation("UserBadges", fields: [badgeId], references: [id])
  earnedAt        DateTime @default(now())
  displayed       Boolean  @default(true)
  
  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@map("user_badges")
}

// Points model
model Points {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation("Points", fields: [userId], references: [id], onDelete: Cascade)
  points          Int      // positive for earning, negative for spending
  source          String   // achievement, challenge, purchase, etc.
  description     String?
  relatedId       String?  // ID of related entity (achievement, challenge, etc.)
  createdAt       DateTime @default(now())
  
  @@index([userId])
  @@index([source])
  @@index([createdAt])
  @@map("points")
}

// Challenge model
model Challenge {
  id              String   @id @default(cuid())
  name            String
  description     String?  @db.Text
  type            String   // daily, weekly, monthly, special
  startDate       DateTime
  endDate         DateTime
  requirements    Json?    // Challenge requirements
  reward          Json?    // Reward structure (points, badge, etc.)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  // Relations
  userChallenges  UserChallenge[] @relation("UserChallenges")
  
  @@index([type])
  @@index([isActive])
  @@index([startDate])
  @@index([endDate])
  @@map("challenges")
}

// User Challenge model
model UserChallenge {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation("UserChallenges", fields: [userId], references: [id], onDelete: Cascade)
  challengeId     String
  challenge       Challenge @relation("UserChallenges", fields: [challengeId], references: [id])
  progress        Float    @default(0)
  status          String   @default("active") // active, completed, failed
  completedAt     DateTime?
  joinedAt        DateTime @default(now())
  
  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
  @@index([status])
  @@map("user_challenges")
}

// Rewards Shop model
model Reward {
  id              String   @id @default(cuid())
  name            String
  description     String?  @db.Text
  cost            Int      // Points cost
  type            String   // physical, digital, discount, etc.
  quantity        Int      @default(-1) // -1 for unlimited
  remaining       Int      @default(-1)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  redemptions     RewardRedemption[] @relation("RewardRedemptions")
  
  @@index([type])
  @@index([isActive])
  @@map("rewards")
}

// Reward Redemption model
model RewardRedemption {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation("RewardRedemptions", fields: [userId], references: [id], onDelete: Cascade)
  rewardId        String
  reward          Reward   @relation("RewardRedemptions", fields: [rewardId], references: [id])
  pointsSpent     Int
  status          String   @default("pending") // pending, processing, completed, cancelled
  redeemedAt      DateTime @default(now())
  completedAt     DateTime?
  
  @@index([userId])
  @@index([rewardId])
  @@index([status])
  @@map("reward_redemptions")
}

// ============ EMAIL CAMPAIGNS ============

// Email Campaign model
model EmailCampaign {
  id              String   @id @default(cuid())
  name            String
  type            String   // drip, trigger, broadcast, ab-test
  status          String   @default("draft") // draft, scheduled, active, paused, completed
  scheduledAt     DateTime?
  sentAt          DateTime?
  createdBy       String?
  subject         String?
  templateId      String?
  segments        Json?    // Target segments
  abTestConfig    Json?    // A/B test configuration
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  emails          CampaignEmail[]
  recipients      CampaignRecipient[]
  
  @@index([type])
  @@index([status])
  @@index([scheduledAt])
  @@map("email_campaigns")
}

// Campaign Email model (for A/B testing)
model CampaignEmail {
  id              String   @id @default(cuid())
  campaignId      String
  campaign        EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  templateId      String?
  subject         String
  content         String   @db.Text
  variant         String?  // A, B, C for A/B testing
  sentCount       Int      @default(0)
  openCount       Int      @default(0)
  clickCount      Int      @default(0)
  createdAt       DateTime @default(now())
  
  @@index([campaignId])
  @@map("campaign_emails")
}

// Campaign Recipient model
model CampaignRecipient {
  id              String   @id @default(cuid())
  campaignId      String
  campaign        EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  userId          String?
  email           String
  status          String   @default("pending") // pending, sent, opened, clicked, bounced, unsubscribed
  openedAt        DateTime?
  clickedAt       DateTime?
  createdAt       DateTime @default(now())
  
  @@index([campaignId])
  @@index([userId])
  @@index([email])
  @@index([status])
  @@map("campaign_recipients")
}

// ============ WHITE-LABEL & MULTI-TENANT ============

// Tenant model (for multi-tenant support)
model Tenant {
  id              String   @id @default(cuid())
  name            String
  subdomain       String   @unique
  apiKey          String   @unique
  apiSecret       String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  brandSettings   BrandSettings? @relation("BrandSettings")
  
  @@index([subdomain])
  @@index([isActive])
  @@map("tenants")
}

// Brand Settings model
model BrandSettings {
  id              String   @id @default(cuid())
  tenantId        String?  @unique
  tenant          Tenant?  @relation("BrandSettings", fields: [tenantId], references: [id])
  brandName       String
  logoUrl         String?
  faviconUrl      String?
  primaryColor    String   @default("#3B82F6")
  secondaryColor  String   @default("#1E40AF")
  fontFamily      String   @default("Inter")
  customCSS       String?  @db.Text
  customJS        String?  @db.Text
  footerText      String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("brand_settings")
}

// Custom Domain model
model CustomDomain {
  id              String   @id @default(cuid())
  tenantId        String?
  domain          String   @unique
  sslCertificate  String?
  dnsConfigured  Boolean  @default(false)
  verified        Boolean  @default(false)
  verifiedAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([domain])
  @@index([verified])
  @@map("custom_domains")
}